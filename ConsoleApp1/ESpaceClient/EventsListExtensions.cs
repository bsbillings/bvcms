// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ESpace
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for EventsList.
    /// </summary>
    public static partial class EventsListExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object Occurrences(this IEventsList operations, string apiKey, long eventId, string version)
            {
                return Task.Factory.StartNew(s => ((IEventsList)s).OccurrencesAsync(apiKey, eventId, version), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OccurrencesAsync(this IEventsList operations, string apiKey, long eventId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OccurrencesWithHttpMessagesAsync(apiKey, eventId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='occurrenceId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object Occurrence(this IEventsList operations, string apiKey, long occurrenceId, string version)
            {
                return Task.Factory.StartNew(s => ((IEventsList)s).OccurrenceAsync(apiKey, occurrenceId, version), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='occurrenceId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OccurrenceAsync(this IEventsList operations, string apiKey, long occurrenceId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OccurrenceWithHttpMessagesAsync(apiKey, occurrenceId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='nextDays'>
            /// </param>
            /// <param name='eventName'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='categoryIds'>
            /// </param>
            /// <param name='locationIds'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='createdDateFrom'>
            /// </param>
            public static object List(this IEventsList operations, string apiKey, string version, long? eventId = default(long?), int? nextDays = default(int?), string eventName = default(string), string startDate = default(string), string endDate = default(string), string categoryIds = default(string), string locationIds = default(string), string externalId = default(string), string createdDateFrom = default(string))
            {
                return Task.Factory.StartNew(s => ((IEventsList)s).ListAsync(apiKey, version, eventId, nextDays, eventName, startDate, endDate, categoryIds, locationIds, externalId, createdDateFrom), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='nextDays'>
            /// </param>
            /// <param name='eventName'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='categoryIds'>
            /// </param>
            /// <param name='locationIds'>
            /// </param>
            /// <param name='externalId'>
            /// </param>
            /// <param name='createdDateFrom'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListAsync(this IEventsList operations, string apiKey, string version, long? eventId = default(long?), int? nextDays = default(int?), string eventName = default(string), string startDate = default(string), string endDate = default(string), string categoryIds = default(string), string locationIds = default(string), string externalId = default(string), string createdDateFrom = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(apiKey, version, eventId, nextDays, eventName, startDate, endDate, categoryIds, locationIds, externalId, createdDateFrom, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
