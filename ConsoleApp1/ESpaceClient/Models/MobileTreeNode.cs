// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ESpace.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class MobileTreeNode
    {
        /// <summary>
        /// Initializes a new instance of the MobileTreeNode class.
        /// </summary>
        public MobileTreeNode() { }

        /// <summary>
        /// Initializes a new instance of the MobileTreeNode class.
        /// </summary>
        public MobileTreeNode(long? itemId = default(long?), long? parentId = default(long?), bool? isSchedulable = default(bool?), bool? hasScheduledChildren = default(bool?), string childrenIds = default(string), bool? isScheduled = default(bool?), bool? hasSchedualbleChildren = default(bool?), string locCode = default(string), int? capacity = default(int?), string name = default(string), bool? expanded = default(bool?), bool? checkedProperty = default(bool?), IList<MobileTreeNode> children = default(IList<MobileTreeNode>), bool? hasChildren = default(bool?), bool? isDraftConflicted = default(bool?), bool? isInventoriedItem = default(bool?), int? currentQtyOnHand = default(int?), int? originalQty = default(int?), int? shortageCount = default(int?), int? itemType = default(int?), bool? isAvailabilityScheduleConflicted = default(bool?), bool? isClosureConflicted = default(bool?), bool? disableUpdate = default(bool?), bool? isAdmin = default(bool?), string disabledReason = default(string), bool? isDisabled = default(bool?))
        {
            ItemId = itemId;
            ParentId = parentId;
            IsSchedulable = isSchedulable;
            HasScheduledChildren = hasScheduledChildren;
            ChildrenIds = childrenIds;
            IsScheduled = isScheduled;
            HasSchedualbleChildren = hasSchedualbleChildren;
            LocCode = locCode;
            Capacity = capacity;
            Name = name;
            Expanded = expanded;
            CheckedProperty = checkedProperty;
            Children = children;
            HasChildren = hasChildren;
            IsDraftConflicted = isDraftConflicted;
            IsInventoriedItem = isInventoriedItem;
            CurrentQtyOnHand = currentQtyOnHand;
            OriginalQty = originalQty;
            ShortageCount = shortageCount;
            ItemType = itemType;
            IsAvailabilityScheduleConflicted = isAvailabilityScheduleConflicted;
            IsClosureConflicted = isClosureConflicted;
            DisableUpdate = disableUpdate;
            IsAdmin = isAdmin;
            DisabledReason = disabledReason;
            IsDisabled = isDisabled;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ItemId")]
        public long? ItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentId")]
        public long? ParentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsSchedulable")]
        public bool? IsSchedulable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HasScheduledChildren")]
        public bool? HasScheduledChildren { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChildrenIds")]
        public string ChildrenIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsScheduled")]
        public bool? IsScheduled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HasSchedualbleChildren")]
        public bool? HasSchedualbleChildren { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocCode")]
        public string LocCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Capacity")]
        public int? Capacity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Expanded")]
        public bool? Expanded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Checked")]
        public bool? CheckedProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Children")]
        public IList<MobileTreeNode> Children { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HasChildren")]
        public bool? HasChildren { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsDraftConflicted")]
        public bool? IsDraftConflicted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsInventoriedItem")]
        public bool? IsInventoriedItem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CurrentQtyOnHand")]
        public int? CurrentQtyOnHand { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OriginalQty")]
        public int? OriginalQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShortageCount")]
        public int? ShortageCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ItemType")]
        public int? ItemType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsAvailabilityScheduleConflicted")]
        public bool? IsAvailabilityScheduleConflicted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsClosureConflicted")]
        public bool? IsClosureConflicted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisableUpdate")]
        public bool? DisableUpdate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsAdmin")]
        public bool? IsAdmin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisabledReason")]
        public string DisabledReason { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsDisabled")]
        public bool? IsDisabled { get; private set; }

    }
}
